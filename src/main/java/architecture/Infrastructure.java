package architecture;

/**
 * DDD 可以支撑多种架构
 *
 * 1、依赖注入
 *  1.1 参考贲目录下 ddd依赖注入架构.png
 *  1.2 在领域层中定义资源库的接口，然后在基础设施层中实现该接口
 *  1.3 事实上，当我们用到依赖倒置原则时，已不存在分层概念了，无论是高层还是底层，都依赖于抽象，就好像把整个架构摊平了一样
 *      补充依赖倒置原则: 上层模块不应该依赖底层模块,它们都应该依赖于抽象,抽象不应该依赖于细节,细节应该依赖于抽象
 *
 * 2、六边形架构
 *  2.1 分成两个区域: 外部区域(提交不同的用户输入)，内部区域(用于获取持久化数据，输出，存储，如数据库)
 *  2.2 六边形每条不同的边代表不同种类型的端口，可以是 http, rpc, MQ 等
 *  2.3 在使用六边形架构时，我们应该根据用例来设计程序，提供统一的 API，因为用户可能是通过 RCP 访问，或 HTTP 访问，或 MQ 访问
 *  2.4 六边形架构可以用来支持其他架构，比如 SOA(Service Oriented Architechture), REST, 时间驱动，CQRS, 甚至 Map-reduce 分布式架构
 *
 * 3、SOA and Restful
 *
 * 4、数据网织
 *
 * 5、网格的分布式缓存
 *
 * 6、事件驱动
 *
 * 7、CQRS
 */
public class Infrastructure {
}
